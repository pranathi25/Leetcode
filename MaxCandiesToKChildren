class Solution {
public:
    bool canCreateSubPiles(vector<int>& candies, long long mid, long long k) {
        long long c = 0;
        for (int i=0;i<candies.size();i++) {
            c += candies[i]/mid;
            if (c >= k) {
                return true;
            }
        }

        return false;
    }
    int maximumCandies(vector<int>& candies, long long k) {
        long long totSum = 0;
        int result = 0;

       for (int i=0; i < candies.size(); i++) {
            totSum += candies[i];
       }                  
       if (k > totSum) return 0;
       if (k == totSum) return 1;
        cout << totSum/k << endl;
       long long r = totSum/k;
       long long l = 1;
       int ans = 0;
       while (l <= r) {
            long long mid = (l + r) /2;
            if (canCreateSubPiles(candies, mid, k)) {
                ans = mid;
                l = mid+1;
            }
            else 
                r = mid - 1;
       }
       return ans;
    }
};
